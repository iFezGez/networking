{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Networking Repository","text":"<p>Welcome to the Vesta Lab Networking stack.</p> <p>This site documents secure connectivity, routing, and service exposure tools used across Vesta Lab infrastructure.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Tailscale 1.84.3 \u2013 mesh VPN container deployed with subnet routing</li> <li>WireGuard 1.0.2021 \u2013 point-to-point VPN for infrastructure tunnels</li> <li>Nginx Proxy Manager 2.12.6 \u2013 GUI-based reverse proxy and SSL manager with wildcard SSL and DNS challenge via Cloudflare</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/","title":"Configuration of Nginx Proxy Manager (latest)","text":""},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#introduction","title":"Introduction","text":"<p>This guide covers the initial and advanced configuration options available through the web GUI of Nginx Proxy Manager. After deployment, most tasks can be managed from the browser.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#first-login","title":"First Login","text":"<ol> <li>Go to: <code>http://&lt;IP_of_dock1&gt;:81</code></li> <li>Login with default credentials:</li> <li>Email: <code>admin@example.com</code></li> <li>Password: <code>changeme</code></li> <li>You will be required to:</li> <li>Set a new password</li> <li>Change the admin email address</li> </ol>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#change-admin-email-password","title":"Change Admin Email &amp; Password","text":"<ul> <li>Navigate to the User icon (top-right) \u2192 Edit Account</li> <li>Update:</li> <li>Email address (e.g., <code>admin@lab.local</code>)</li> <li>Password</li> <li>Save changes and re-login if needed</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#add-a-proxy-host","title":"Add a Proxy Host","text":"<ol> <li>Go to Hosts \u2192 Proxy Hosts</li> <li>Click Add Proxy Host</li> <li>Fill in:</li> <li>Domain Names: e.g. <code>app.vesta.local</code></li> <li>Forward Hostname/IP: internal IP of target service</li> <li>Forward Port: 80 or 443</li> <li>Optionally enable:<ul> <li>Block common exploits</li> <li>Websockets support</li> </ul> </li> <li>Under SSL tab:</li> <li>Enable SSL</li> <li>Request a Let's Encrypt certificate</li> <li>Agree to terms</li> <li>Optionally enable HTTP/2 and HSTS</li> <li>Click Save</li> </ol>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#setup-wildcard-ssl-with-cloudflare-recommended","title":"Setup Wildcard SSL with Cloudflare (Recommended)","text":"<p>To issue wildcard certificates using Let's Encrypt and Cloudflare DNS challenge:</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#1-create-an-api-token-in-cloudflare","title":"1. Create an API Token in Cloudflare","text":"<p>Go to https://dash.cloudflare.com/profile/api-tokens</p> <ul> <li>Choose: Edit Zone DNS</li> <li>Permissions:</li> <li>Zone \u2192 DNS \u2192 Read</li> <li>Zone \u2192 DNS \u2192 Edit</li> <li>Zone Resources:</li> <li>Include \u2192 Specific zone \u2192 <code>vestasec.com</code></li> <li>Copy and save the generated token.</li> </ul> <p></p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#2-create-wildcard-certificate-in-npm","title":"2. Create wildcard certificate in NPM","text":"<ol> <li>Go to SSL Certificates \u2192 Add SSL Certificate</li> <li>Enter <code>*.vestasec.com</code> as domain</li> <li>Use DNS Challenge \u2192 Select Cloudflare</li> <li>Paste credentials:</li> </ol> <pre><code>dns_cloudflare_api_token=your_token_here\n</code></pre> <ol> <li>Accept Let's Encrypt terms and click Save</li> </ol>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#3-setup-dns-a-record","title":"3. Setup DNS A Record","text":"<ul> <li>In Cloudflare DNS settings:</li> <li>Create <code>A</code> record for <code>*</code> \u2192 points to public IP or internal IP (<code>10.20.0.20</code>)</li> <li>Set proxy mode to DNS Only during cert issuance</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#4-add-proxy-hosts","title":"4. Add Proxy Hosts","text":"<p>Once cert is issued, you can add proxy hosts like:</p> <ul> <li><code>dock1.vestasec.com</code></li> <li><code>ve1.vestasec.com</code></li> </ul> <p>Each will automatically use the wildcard certificate.</p> <p></p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#ssl-certificate-management","title":"SSL Certificate Management","text":"<ul> <li>All requested certs will appear under SSL Certificates</li> <li>You can:</li> <li>Reissue or delete certificates</li> <li>Create self-signed certificates if needed</li> <li>Import existing certificates manually</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#access-logs","title":"Access &amp; Logs","text":"Location Description <code>/data/logs/</code> Contains access and error logs Web GUI \u2192 Logs Filter per host or global Docker logs Use <code>docker logs -f npm</code> for real-time"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#backup-and-restore","title":"Backup and Restore","text":"<ul> <li>Go to Settings \u2192 Backup</li> <li>Download configuration</li> <li>Restore from file during new deployments</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Use subdomains for each service (e.g., <code>grafana.lab.local</code>)</li> <li>Set automatic SSL renewal (default is enabled)</li> <li>Avoid exposing the admin panel to the public internet</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Networking \u2192</li> <li>Features \u2192</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/features/","title":"Nginx Proxy Manager \u2013 Feature Overview","text":""},{"location":"nginx-proxy-manager/2.12.6/docker/docs/features/#introduction","title":"Introduction","text":"<p>Nginx Proxy Manager is a web-based GUI for managing Nginx reverse proxies with SSL. Ideal for homelabs, SMBs, and production gateways.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/features/#core-features","title":"Core Features","text":"Feature Description Proxy hosts Route domains to internal services SSL certificates Let's Encrypt, self-signed, or manual Wildcard support Full wildcard via Cloudflare DNS challenge HTTP to HTTPS Automatic redirection, HSTS, HTTP/2 Access control IP allow/deny lists per host Logging Per-host logs + global stats from UI Multi-user support Add GUI accounts with role restrictions Config backup Export and import configuration snapshots"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/features/#typical-use-cases","title":"Typical Use Cases","text":"<ul> <li>Expose internal tools securely via subdomains</li> <li>Centralize TLS management with auto-renewals</li> <li>Replace nginx + certbot setups with friendly UI</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/features/#ui-sections","title":"UI Sections","text":"<ul> <li>Dashboard: system and container stats</li> <li>Hosts: manage proxy/redirection/stream rules</li> <li>SSL: view/manage certificate status</li> <li>Users: manage access for admins or guests</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/features/#next-steps","title":"Next Steps","text":"<ul> <li>Troubleshooting \u2192</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/","title":"Installation of Nginx Proxy Manager (latest)","text":""},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#introduction","title":"Introduction","text":"<p>This guide explains how to install Nginx Proxy Manager (latest version) in a Docker container on a Vesta Lab VM. It provides a web-based GUI for managing reverse proxies, SSL certificates, and domain forwarding.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Linux VM with Docker and Docker Compose installed (e.g., dock1)</li> <li>Open ports: 80, 81, and 443 must not be used by other services</li> <li>Internet access for pulling the container image</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#step-1-create-working-directory","title":"Step 1 \u2013 Create working directory","text":"<pre><code>mkdir -p ~/npm-docker\ncd ~/npm-docker\n</code></pre>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#step-2-create-docker-composeyml","title":"Step 2 \u2013 Create docker-compose.yml","text":"<pre><code>version: '3'\n\nservices:\n  npm:\n    container_name: npm\n    image: jc21/nginx-proxy-manager:latest\n    restart: unless-stopped\n    ports:\n      - 80:80        # HTTP\n      - 81:81        # Admin UI\n      - 443:443      # HTTPS\n    volumes:\n      - npm-data:/data\n      - npm-letsencrypt:/etc/letsencrypt\n\nvolumes:\n  npm-data:\n  npm-letsencrypt:\n</code></pre>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#step-3-start-the-container","title":"Step 3 \u2013 Start the container","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#step-4-access-the-web-ui","title":"Step 4 \u2013 Access the Web UI","text":"<ul> <li>URL: <code>http://&lt;IP_of_dock1&gt;:81</code></li> <li>Default login:</li> <li>Email: <code>admin@example.com</code></li> <li>Password: <code>changeme</code></li> </ul> <p>You will be prompted to set a new admin password on first login.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#gui-configuration-optional","title":"GUI Configuration (Optional)","text":"Section Action Purpose SSL Certificates Request Let's Encrypt certs Secure HTTPS for any domain Hosts \u2192 Proxy Add a new proxy host Reverse proxy for services Users Create limited accounts Delegate access with RBAC"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#validation-and-tests","title":"Validation and Tests","text":"<pre><code>docker ps\ndocker exec -it npm nginx -t\ncurl -I http://localhost\n</code></pre>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#common-issues","title":"Common Issues","text":"Problem Solution Port 80/443 already in use Stop conflicting services like Apache/Nginx Login fails Reset via <code>/data/nginx/logs/error.log</code> SSL issues Ensure domain points to your public IP"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration \u2192</li> <li>Official documentation</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/","title":"Networking for Nginx Proxy Manager","text":""},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#introduction","title":"Introduction","text":"<p>This document outlines the network design and requirements for deploying Nginx Proxy Manager in a Docker container, including ports, DNS, and integration with local VLANs.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#required-ports","title":"Required Ports","text":"Port Protocol Purpose 80 TCP HTTP traffic 443 TCP HTTPS traffic 81 TCP Web admin UI"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#docker-network-mode","title":"Docker Network Mode","text":"<p>NPM runs in Docker bridge mode, publishing ports to the host interface. No special networking is needed unless you run services on custom bridges.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#vlans-and-host-interfaces","title":"VLANs and Host Interfaces","text":"Subnet Interface Purpose <code>10.10.0.0/24</code> <code>vlan10-mgmt</code> Internal management traffic <code>10.20.0.0/24</code> <code>vlan20-svc</code> Containers and services <code>10.30.0.0/24</code> <code>vlan30-stor</code> NAS and backups <code>10.60.0.0/24</code> <code>vlan60-dmz</code> External-facing services"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#dns-and-domains","title":"DNS and Domains","text":"<p>You can use:</p> <ul> <li>Internal DNS records (e.g. <code>grafana.lab.local</code>)</li> <li>Public DNS with wildcard (e.g. <code>*.vestasec.com</code>)</li> </ul> <p>For SSL with Cloudflare, domain must resolve correctly and match the certificate.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#testing-tools","title":"Testing Tools","text":"<pre><code>curl -IL http://grafana.lab.local\ncurl -IL https://grafana.lab.local --insecure\ndocker logs -f npm\n</code></pre>"},{"location":"nginx-proxy-manager/2.12.6/docker/docs/network/#next-steps","title":"Next Steps","text":"<ul> <li>Features \u2192</li> </ul>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/","title":"General Troubleshooting \u2013 Nginx Proxy Manager","text":""},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#introduction","title":"Introduction","text":"<p>This guide provides solutions for common issues encountered when using Nginx Proxy Manager in a Docker environment, particularly with SSL, port conflicts, and reverse proxy failures.</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#port-conflicts-80443","title":"Port Conflicts (80/443)","text":"<p>Symptoms: - Container won't start - Logs show: <code>Error starting userland proxy: listen tcp 0.0.0.0:80: bind: address already in use</code></p> <p>Solution: - Identify the process occupying the port:   <code>bash   sudo lsof -i :80   sudo lsof -i :443</code> - Stop or disable conflicting services (e.g. Apache, another Nginx) - Restart NPM:   <code>bash   docker-compose restart</code></p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#ssl-certificate-request-fails","title":"SSL Certificate Request Fails","text":"<p>Symptoms: - Let's Encrypt cert fails to issue - Error: <code>Timeout during connect (likely firewall blocking port 80)</code></p> <p>Solution: - Ensure port 80 is open to the internet - Temporarily disable Cloudflare proxy (DNS Only mode) - Use DNS Challenge + Cloudflare API token if public IP is dynamic</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#wildcard-dns-challenge-fails","title":"Wildcard DNS Challenge fails","text":"<p>Symptoms: - Cert creation with <code>*.domain.com</code> fails - Logs show DNS update timeout or token errors</p> <p>Solution: - Verify your API token in Cloudflare:   - Must have DNS Read + Edit for the zone - Ensure token uses correct <code>dns_cloudflare_api_token=...</code> format - Check DNS propagation time or set Propagation Seconds to <code>60</code></p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#admin-panel-not-loading","title":"Admin Panel Not Loading","text":"<p>Symptoms: - UI is inaccessible via browser (<code>http://ip:81</code>) - Browser says \u201crefused to connect\u201d or blank screen</p> <p>Solution: - Check container health:   <code>bash   docker ps   docker logs -f npm</code> - Verify port 81 is not blocked by firewall - Check if container restarted due to volume or permission issues</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#proxy-host-not-responding","title":"Proxy Host Not Responding","text":"<p>Symptoms: - Clicking a domain returns 502 or times out - Internal service doesn\u2019t appear to respond</p> <p>Solution: - Confirm destination IP and port are correct - Check if upstream service is running - Enable WebSocket support if required - Check container logs for backend errors</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#certificate-renewal-fails","title":"Certificate Renewal Fails","text":"<p>Symptoms: - Old cert shows \"Expires soon\" or \u201cRenewal failed\u201d</p> <p>Solution: - Go to SSL Certificates \u2192 manually click Renew - Check if NPM has access to issue again (DNS or port 80) - For DNS challenge, renews automatically if token is still valid</p>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#useful-commands","title":"Useful Commands","text":"<pre><code>docker logs -f npm\ndocker exec -it npm nginx -t\ndocker inspect npm\n</code></pre>"},{"location":"nginx-proxy-manager/2.12.6/docker/troubleshooting/general/#references","title":"References","text":"<ul> <li>Nginx Proxy Manager Docs</li> <li>Let's Encrypt Rate Limits</li> <li>Cloudflare DNS API Docs</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/","title":"Tailscale 1.84.3 (Docker)","text":""},{"location":"tailscale/1.84.3/docker/docs/#introduction","title":"Introduction","text":"<p>Tailscale is a secure mesh VPN solution based on WireGuard that allows devices to connect across private networks without complex firewall or NAT configurations. This stack documents the deployment of Tailscale inside a Docker container, which acts as an active node and subnet gateway to access internal lab VLANs.</p>"},{"location":"tailscale/1.84.3/docker/docs/#stack-purpose","title":"Stack Purpose","text":"<ul> <li>Connect isolated Docker environments to the Tailscale mesh network</li> <li>Expose multiple internal VLANs to remote clients through a single container</li> <li>Provide secure relay between on-prem and mobile nodes</li> <li>Take advantage of automatic discovery, encrypted tunnels, and centralized ACLs</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/#topology","title":"Topology","text":"<pre><code>+-------------------+        VPN Mesh (Tailscale)       +---------------------+\n|  Laptop (Remote)  |  &lt;-----------------------------&gt;  |   Tailscale Container |\n|  IP: 100.x.x.x    |                                  |   Host: dock1         |\n+-------------------+                                  +-----------+---------+\n                                                                    |\n                                                                    | host networking\n                                                                    |\n                                                        +-----------+----------+\n                                                        |  Internal VLANs       |\n                                                        |  10.10.0.0/24, etc.   |\n                                                        +------------------------+\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/#components","title":"Components","text":"Component Version Role Tailscale image latest VPN node Docker 24.x Container runtime environment Linux host Debian 12 VLAN router + local bridge"},{"location":"tailscale/1.84.3/docker/docs/#documentation","title":"Documentation","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>Networking</li> <li>Features</li> <li>Troubleshooting</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/configuration/","title":"Tailscale Subnet Router Configuration","text":""},{"location":"tailscale/1.84.3/docker/docs/configuration/#introduction","title":"Introduction","text":"<p>This guide explains how to configure a Docker container running Tailscale as a subnet router, allowing remote access to internal lab networks through Tailscale\u2019s mesh VPN.</p>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#prerequisites","title":"Prerequisites","text":"<ul> <li>A running Tailscale container with host networking</li> <li>Preapproved reusable auth key</li> <li>Reachable internal VLANs via the host</li> <li>Access to the Tailscale admin panel</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#step-1-advertise-internal-subnets","title":"Step 1 \u2013 Advertise internal subnets","text":"<p>Edit your <code>docker-compose.yml</code> and add <code>--advertise-routes</code> to <code>TS_EXTRA_ARGS</code>:</p> <pre><code>environment:\n  - TS_AUTHKEY=tskey-xxxxxxxxxxxxxxxx\n  - TS_EXTRA_ARGS=--hostname=dock1 --advertise-routes=10.0.0.0/24,10.10.0.0/24,10.20.0.0/24,10.30.0.0/24,10.40.0.0/24,10.50.0.0/24,10.60.0.0/24\n</code></pre> <p>You can include multiple comma-separated CIDRs.</p>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#step-2-restart-the-container","title":"Step 2 \u2013 Restart the container","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#step-3-approve-routes-in-the-admin-panel","title":"Step 3 \u2013 Approve routes in the admin panel","text":"<ol> <li>Go to https://login.tailscale.com/admin/machines</li> <li>Locate the node <code>dock1</code></li> <li>Click \"Enable subnet routes\"</li> <li>Make sure the route indicator turns green</li> </ol>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#step-4-test-from-another-node","title":"Step 4 \u2013 Test from another node","text":"<p>From a remote Tailscale device:</p> <pre><code>tailscale status\nping 10.10.0.1\nssh user@10.10.0.50\n</code></pre> <p>If successful, you are reaching your lab's internal LAN over Tailscale.</p>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#enable-ip-forwarding-on-the-host","title":"Enable IP forwarding on the host","text":"<pre><code>sysctl -w net.ipv4.ip_forward=1\n</code></pre> <p>Make it persistent:</p> <pre><code>echo \"net.ipv4.ip_forward = 1\" &gt;&gt; /etc/sysctl.conf\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#vlans-and-advertised-subnets","title":"VLANs and advertised subnets","text":"Subnet Interface Suggested Purpose <code>10.0.0.0/24</code> <code>ether1</code> Primary network and internet gateway <code>10.10.0.0/24</code> <code>vlan10-mgmt</code> Management: Proxmox, Ceph, MikroTik, monitoring <code>10.20.0.0/24</code> <code>vlan20-svc</code> Internal services: containers, APIs, databases <code>10.30.0.0/24</code> <code>vlan30-stor</code> Storage: TrueNAS, MinIO, Nextcloud <code>10.40.0.0/24</code> <code>vlan40-bak</code> Backups and snapshots: PBS, Veeam, Restic, Borg <code>10.50.0.0/24</code> <code>vlan50-iot</code> IoT devices: cameras, sensors, automation <code>10.60.0.0/24</code> <code>vlan60-dmz</code> Public exposure: reverse proxies, VPN entrypoints <code>10.70.0.0/24</code> <code>vlan70-guest</code> Guest Wi-Fi and isolated traffic"},{"location":"tailscale/1.84.3/docker/docs/configuration/#validation-and-tests","title":"Validation and Tests","text":"<p>From inside the container:</p> <pre><code>tailscale status\nping 10.10.0.1\n</code></pre> <p>From a remote client:</p> <pre><code>ping 10.10.0.10\nssh user@10.20.0.5\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#common-issues","title":"Common Issues","text":"Issue Solution Routes not advertised Check TS_EXTRA_ARGS syntax Cannot ping internal IPs Enable IP forwarding on host Traffic doesn't reach VLANs Check firewall rules or bridge config on <code>dock1</code>"},{"location":"tailscale/1.84.3/docker/docs/configuration/#references","title":"References","text":"<ul> <li>Installation \u2192</li> <li>Subnet Routing Docs</li> <li>ACLs and Tagging</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/features/","title":"Tailscale (Docker) \u2013 Features Overview","text":""},{"location":"tailscale/1.84.3/docker/docs/features/#introduction","title":"Introduction","text":"<p>This document highlights the key features available when running Tailscale inside a Docker container. Despite being containerized, Tailscale supports most mesh VPN and routing capabilities found in full OS deployments.</p>"},{"location":"tailscale/1.84.3/docker/docs/features/#feature-matrix","title":"Feature Matrix","text":"Feature Description Automatic mesh connectivity Direct or relay-based peer communication without manual IP config Subnet routing Advertise LAN/VLAN subnets to other Tailscale nodes NAT traversal Bypass NAT/firewalls using UDP hole punching and DERP fallback MagicDNS Internal name resolution within the tailnet using <code>.ts.net</code> domain ACLs and node tagging Fine-grained access control based on identity, tags, and groups Exit Node support Route internet-bound traffic through another Tailscale node Persistent IP address Each node receives a fixed IP (e.g., <code>100.x.x.x</code>) Auth key management Supports ephemeral, reusable, and preapproved node authentication End-to-end encryption Based on WireGuard, all traffic is encrypted between nodes Central web admin UI Visual control over connected devices, routes, DNS, and ACLs"},{"location":"tailscale/1.84.3/docker/docs/features/#use-cases-in-containers","title":"Use Cases in Containers","text":"<ul> <li>Join internal-only Docker services to a global mesh network</li> <li>Use the container as a private gateway for remote access to VLANs</li> <li>Run test services in isolated labs and connect securely without port forwarding</li> <li>Enable encrypted communication between cloud VMs and on-prem resources</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/features/#best-practices-for-docker-usage","title":"Best Practices for Docker Usage","text":"Aspect Recommendation Networking mode Use <code>host</code> mode for visibility into physical interfaces Capabilities Add <code>NET_ADMIN</code> and map <code>/dev/net/tun</code> Persistent identity Mount <code>/var/lib/tailscale</code> as a volume Restarts Use <code>restart: unless-stopped</code> or manage via systemd/compose"},{"location":"tailscale/1.84.3/docker/docs/features/#related-sections","title":"Related Sections","text":"<ul> <li>Installation</li> <li>Networking</li> <li>Troubleshooting</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/installation/","title":"Installation of Tailscale 1.84.3 (Docker)","text":""},{"location":"tailscale/1.84.3/docker/docs/installation/#introduction","title":"Introduction","text":"<p>This guide details how to install and run Tailscale 1.84.3 inside a Docker container on a Linux machine. This setup allows the container to act as a VPN client and optional subnet router for internal networks.</p>"},{"location":"tailscale/1.84.3/docker/docs/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux system with Docker and Docker Compose installed</li> <li>An active Tailscale account: https://tailscale.com</li> <li>A valid auth key (<code>tskey-...</code>) from the admin panel</li> <li>Access to <code>/dev/net/tun</code> and <code>CAP_NET_ADMIN</code> permissions</li> <li>UDP port 41641 allowed for outbound traffic</li> <li>Internal VLANs you want to advertise</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/installation/#step-1-create-working-directory","title":"Step 1 \u2013 Create working directory","text":"<pre><code>mkdir -p ~/tailscale-docker\ncd ~/tailscale-docker\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/installation/#step-2-create-docker-composeyml","title":"Step 2 \u2013 Create docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  tailscale:\n    container_name: tailscale\n    image: tailscale/tailscale:latest\n    network_mode: \"host\"\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    volumes:\n      - tailscale-var-lib:/var/lib/tailscale\n      - /dev/net/tun:/dev/net/tun\n    environment:\n      - TS_AUTHKEY=tskey-xxxxxxxxxxxxxxxx\n      - TS_EXTRA_ARGS=--hostname=dock1 --advertise-routes=10.0.0.0/24,10.10.0.0/24,10.20.0.0/24,10.30.0.0/24,10.40.0.0/24,10.50.0.0/24,10.60.0.0/24\n    restart: unless-stopped\n\nvolumes:\n  tailscale-var-lib:\n</code></pre> <p>\ud83d\udca1 Generate your auth key from admin/settings/authkeys. Recommended: mark it as Reusable and Preauthorized.</p>"},{"location":"tailscale/1.84.3/docker/docs/installation/#step-3-start-the-container","title":"Step 3 \u2013 Start the container","text":"<pre><code>docker-compose up -d\n</code></pre> <p>This will pull the image and run the container with host networking and routing enabled.</p>"},{"location":"tailscale/1.84.3/docker/docs/installation/#step-4-check-container-status","title":"Step 4 \u2013 Check container status","text":"<pre><code>docker ps\n![Container running](../assets/tailscale-docker-ps.png)\ndocker logs -f tailscale\ndocker exec -it tailscale tailscale status\n![tailscale status output](../assets/tailscale-status-cli.png)\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/installation/#admin-panel-tips","title":"Admin Panel Tips","text":"Menu Action Purpose Admin Panel Enable Subnet Routes Allow access to local lab networks Machines Check hostname Confirm container is registered as <code>dock1</code> Auth Keys Create new key Automate deployments"},{"location":"tailscale/1.84.3/docker/docs/installation/#validation-and-tests","title":"Validation and Tests","text":"<ul> <li>From another Tailscale node:</li> </ul> <pre><code>ping 100.x.x.x         # container IP\nping 10.10.0.10        # real LAN IP behind container\n</code></pre> <ul> <li>From inside the container:</li> </ul> <pre><code>ping 10.10.0.1\ntailscale status\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/installation/#common-issues","title":"Common Issues","text":"Issue Solution <code>No such container</code> Ensure <code>docker-compose up</code> ran successfully Node does not appear in the panel Check if auth key is valid and preapproved Subnet access not working Approve routes in Admin Panel and enable IP forwarding LAN ping fails Ensure IP forwarding is enabled on host"},{"location":"tailscale/1.84.3/docker/docs/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Configuration \u2192</li> <li>Tailscale Docker Docs</li> <li>Admin Panel</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/network/","title":"Tailscale Networking (Docker)","text":""},{"location":"tailscale/1.84.3/docker/docs/network/#introduction","title":"Introduction","text":"<p>This document explains how Tailscale integrates with the host network when running in a Docker container using <code>network_mode: host</code>, including ports used, NAT traversal behavior, and DNS handling.</p>"},{"location":"tailscale/1.84.3/docker/docs/network/#required-ports","title":"Required Ports","text":"Port Protocol Purpose 41641 UDP Primary WireGuard peer-to-peer traffic 443 TCP Control connection to coordination server 53 UDP DNS resolution if MagicDNS is enabled <p>Note: Tailscale does not require incoming ports, but outbound UDP 41641 must be allowed.</p>"},{"location":"tailscale/1.84.3/docker/docs/network/#nat-traversal","title":"NAT Traversal","text":"<p>Tailscale supports advanced NAT traversal techniques:</p> <ul> <li>UDP hole punching</li> <li>Fallback relaying via DERP servers</li> <li>Automatic IPv4/IPv6 detection</li> </ul> <p>This allows connectivity from networks behind firewalls, double NAT, or LTE providers, without manual port forwarding.</p>"},{"location":"tailscale/1.84.3/docker/docs/network/#magicdns","title":"MagicDNS","text":"<p>Tailscale supports internal DNS resolution using the <code>.ts.net</code> domain. When MagicDNS is enabled:</p> <ul> <li>Nodes can resolve each other by name</li> <li>You don't need to memorize IPs like <code>100.x.x.x</code></li> <li>DNS config is pushed from the control panel</li> </ul>"},{"location":"tailscale/1.84.3/docker/docs/network/#host-interfaces","title":"Host Interfaces","text":"<p>Running with <code>network_mode: host</code> gives the container full access to host interfaces, including access to internal VLANs:</p> Subnet Interface Suggested Purpose <code>10.0.0.0/24</code> <code>ether1</code> Primary network and internet gateway <code>10.10.0.0/24</code> <code>vlan10-mgmt</code> Management: Proxmox, Ceph, MikroTik, monitoring <code>10.20.0.0/24</code> <code>vlan20-svc</code> Internal services: containers, APIs, databases <code>10.30.0.0/24</code> <code>vlan30-stor</code> Storage: TrueNAS, MinIO, Nextcloud <code>10.40.0.0/24</code> <code>vlan40-bak</code> Backups and snapshots: PBS, Veeam, Restic, Borg <code>10.50.0.0/24</code> <code>vlan50-iot</code> IoT devices: cameras, sensors, automation <code>10.60.0.0/24</code> <code>vlan60-dmz</code> Public exposure: reverse proxies, VPN entrypoints <code>10.70.0.0/24</code> <code>vlan70-guest</code> Guest Wi-Fi and isolated traffic"},{"location":"tailscale/1.84.3/docker/docs/network/#diagnostics","title":"Diagnostics","text":"<p>Run the following from inside the container:</p> <pre><code>tailscale netcheck\ntailscale status\nping 10.10.0.1\n</code></pre>"},{"location":"tailscale/1.84.3/docker/docs/network/#common-issues","title":"Common Issues","text":"Issue Solution All traffic via DERP Likely UDP blocked; check firewall/NAT Can't resolve names Enable MagicDNS in control panel No subnet access Verify subnet routes are approved"},{"location":"tailscale/1.84.3/docker/docs/network/#see-also","title":"See Also","text":"<ul> <li>Configuration</li> <li>Features</li> <li>DERP status</li> </ul>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/","title":"Tailscale (Docker) \u2013 Troubleshooting Guide","text":""},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#introduction","title":"Introduction","text":"<p>This guide provides common troubleshooting steps for issues encountered while running Tailscale inside a Docker container.</p>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#common-problems-and-solutions","title":"Common Problems and Solutions","text":""},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#problem-container-is-not-connecting-to-tailscale-network","title":"Problem: Container is not connecting to Tailscale network","text":"<p>Symptoms: - <code>tailscale status</code> shows <code>stopped</code> or <code>no connection</code> - Node does not appear in the admin panel</p> <p>Solution: - Ensure the auth key is valid and preapproved - Restart the container: <code>docker-compose restart</code> - Check logs: <code>docker logs tailscale</code></p>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#problem-subnet-routes-not-available","title":"Problem: Subnet routes not available","text":"<p>Symptoms: - <code>tailscale status</code> does not show <code>routes: ...</code> - Internal IPs (e.g. <code>10.10.0.1</code>) are not reachable from other nodes</p> <p>Solution: - Verify <code>--advertise-routes=</code> is set correctly in <code>TS_EXTRA_ARGS</code> - Approve routes in the Admin Panel - Enable IP forwarding on the host (<code>net.ipv4.ip_forward = 1</code>)</p>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#problem-derp-fallback-for-all-connections","title":"Problem: DERP fallback for all connections","text":"<p>Symptoms: - <code>tailscale netcheck</code> shows relay-only - High latency and unstable connections</p> <p>Solution: - Check that outbound UDP port 41641 is allowed - Inspect firewall/NAT rules for restrictive behavior</p>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#problem-magicdns-is-not-working","title":"Problem: MagicDNS is not working","text":"<p>Symptoms: - Cannot resolve <code>hostname.tailnet.ts.net</code> - Only IP-based access is functional</p> <p>Solution: - Enable MagicDNS in the admin panel under DNS settings - Check that the Tailscale client has DNS configuration enabled</p>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code>tailscale status\ntailscale netcheck\ntailscale ip -4\nping 10.10.0.1\n</code></pre>"},{"location":"tailscale/1.84.3/docker/troubleshooting/general/#useful-links","title":"Useful Links","text":"<ul> <li>Admin Panel</li> <li>Official Docs \u2013 Troubleshooting</li> <li>Subnet Routing Guide</li> </ul>"}]}